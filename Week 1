#Q1 - Given a non-empty array of integers, every element appears twice except for one. Find that single one.
import copy

class Solution(object):
    def singleNumber(self, nums):
        a = {}
        for i in nums:
            if i in a:
                a[i] += 1
            else:
                a[i] = 1
        for i,j in a.items():
            if j==1:
                return i
        """
        :type nums: List[int]
        :rtype: int
        """
        
#Q2 - 
"""Write an algorithm to determine if a number n is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Return True if n is a happy number, and False if not."""

class Solution(object):
    def isHappy(self, n):
        sum = n
        ls = []
        while(1):
            n = sum
            sum = 0
            ls.append(n)
            for i in str(n):
                sum += int(i)**2
            if sum == 1:
                return True
            elif sum in ls:
                return False
            
        """
        :type n: int
        :rtype: bool
        """
    
#Q3 - Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

class Solution(object):
    def maxSubArray(self, nums):
        largest = nums[0]
        so = 0
        i=0
        for i in nums:
            so += i
            if largest < so:
                largest = so
            if so<0:
                so=0
        return largest
        """
        :type nums: List[int]
        :rtype: int
        """
        
 #Q4 - 
 
'''Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

1) You must do this in-place without making a copy of the array.
2) Minimize the total number of operations.'''

class Solution(object):
    def moveZeroes(self, nums):
        n = len(nums)
        for i in range(n):
            if nums[i] != 0:
                nums.append(nums[i])
        nums += [0]*(2*n-len(nums))
        nums[:] = nums[n:]
        return None
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
       
#Q5
'''Say you have an array prices for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).'''

class Solution(object):
    def maxProfit(self, prices):
        i = 0
        low = prices[0]
        pro = 0
        if len(prices)==1:
            return 0
        while i < len(prices):
            while prices[i] <= prices[i+1] and i+2<len(prices):
                i+=1
            if i+2 == len(prices):
                if prices[i] < prices[i+1]:
                    pro +=  prices[i+1] - low
                else:
                    pro += prices[i] - low
                i+=3
            else:
                pro += prices[i] - low
                i+=1
                low = prices[i]        
        
        return pro
                
                
                    
                        
                        
                        
        """
        :type prices: List[int]
        :rtype: int
        """
        
#Q7 
'''Given an integer array arr, count element x such that x + 1 is also in arr.

If there're duplicates in arr, count them seperately.'''

class Solution(object):
    def countElements(self, arr):
        dc= {}
        for i in set(arr):
            dc[i] = 0
        for i in arr:    
            if i+1 in arr:
                dc[i] += 1
        return sum(dc.values())
            
        """
        :type arr: List[int]
        :rtype: int
        """
        
